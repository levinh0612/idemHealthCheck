#!/bin/bash

# Th√¥ng tin c·∫•u h√¨nh t·ª´ bi·∫øn m√¥i tr∆∞·ªùng (d√πng l√†m m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng ch·ªâ ƒë·ªãnh)
TELEGRAM_BOT_TOKEN="$TELEGRAM_BOT_TOKEN"
TELEGRAM_CHAT_ID="$TELEGRAM_CHAT_ID"

# M·∫£ng danh s√°ch c√°c server c·∫ßn ping (ch·ªâ c·∫ßn host)
SERVERS=(
    "192.168.1.206"  # Server 1
    "staging-idempiere.fahasa.com"  # Server 2
)

# M·∫£ng danh s√°ch c√°c database c·∫ßn ki·ªÉm tra (format: "host:port:type:username:password:dbname")
# type: mysql ho·∫∑c postgres
DATABASES=(
    "192.168.1.206:9999:postgres:adempiere:adempiere:idempiere"  # Database 2 (PostgreSQL)
    "192.168.13.128:5432:postgres:adempiere:YGmm5bdy4bZHPJwADauOQiMxRby4NMyO:idempiere"  # Database 2 (PostgreSQL)
)

# H√†m g·ª≠i th√¥ng b√°o qua Telegram
send_telegram_message() {
    local message=$1
    echo "Sending Telegram message: $message"
    response=$(curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
        -d chat_id="$TELEGRAM_CHAT_ID" \
        -d text="$message" \
        -d parse_mode="Markdown")
    echo "Telegram response: $response"
}

# Ki·ªÉm tra k·∫øt n·ªëi v·ªõi bot Telegram khi kh·ªüi ƒë·ªông l·∫ßn ƒë·∫ßu
echo "Starting health check script at $(date '+%Y-%m-%d %H:%M:%S')"
FIRST_RUN_FILE="/app/.firstrun"
if [ ! -f "$FIRST_RUN_FILE" ]; then
    echo "First run detected, testing Telegram connection..."
    if curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
        -d chat_id="$TELEGRAM_CHAT_ID" \
        -d text="Test connection" > /dev/null 2>&1; then
        send_telegram_message "‚úÖ *Bot check health idem ƒë√£ ƒë∆∞·ª£c ch·∫°y v√†o l√∫c:* `date '+%Y-%m-%d %H:%M:%S'`"
        touch "$FIRST_RUN_FILE"  # ƒê√°nh d·∫•u ƒë√£ ch·∫°y l·∫ßn ƒë·∫ßu
        echo "First run completed, flag created."
    else
        echo "L·ªói: Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi Telegram API. Ki·ªÉm tra TELEGRAM_BOT_TOKEN v√† TELEGRAM_CHAT_ID."
    fi
fi

# Ki·ªÉm tra server b·∫±ng ping
for SERVER_HOST in "${SERVERS[@]}"; do
    echo "Pinging server $SERVER_HOST..."
    ping -c 4 "$SERVER_HOST" > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        send_telegram_message "üö® *C·∫£nh b√°o:* Server $SERVER_HOST kh√¥ng ph·∫£n h·ªìi (ping th·∫•t b·∫°i)!"
    else
        echo "Ping successful for $SERVER_HOST"
    fi
done

# Ki·ªÉm tra database b·∫±ng client
for DB in "${DATABASES[@]}"; do
    # T√°ch c√°c tr∆∞·ªùng t·ª´ chu·ªói DB
    IFS=':' read -r DB_HOST DB_PORT DB_TYPE DB_USER DB_PASSWORD DBNAME <<< "$DB"
    
    echo "Checking database $DB_HOST:$DB_PORT ($DB_TYPE) with user $DB_USER..."
    if [ "$DB_TYPE" = "mysql" ]; then
        mysql -h "$DB_HOST" -P "$DB_PORT" -u "$DB_USER" -p"$DB_PASSWORD" -e "SELECT 1" > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            send_telegram_message "üö® *C·∫£nh b√°o:* Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn database MySQL $DB_HOST:$DB_PORT!"
        else
            echo "Database MySQL $DB_HOST:$DB_PORT is reachable"
        fi
    elif [ "$DB_TYPE" = "postgres" ]; then
        psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DBNAME" -c "SELECT 1" > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            send_telegram_message "üö® *C·∫£nh b√°o:* Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn database PostgreSQL $DB_HOST:$DB_PORT!"
        else
            echo "Database PostgreSQL $DB_HOST:$DB_PORT is reachable"
        fi
    else
        echo "Lo·∫°i database $DB_TYPE kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£"
    fi
done

echo "Health check completed at $(date '+%Y-%m-%d %H:%M:%S')"